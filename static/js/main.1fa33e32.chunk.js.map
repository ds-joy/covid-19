{"version":3,"sources":["components/Header/Header.js","components/Card/Cards.js","components/util.js","components/Map/Map.js","components/Chart/Chart.js","components/Graph/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["Header","props","className","FormControl","Select","variant","onChange","onCountrySelect","value","country","MenuItem","countries","map","name","Cards","Card","onClick","active","isRed","CardContent","Typography","color","gutterBottom","title","cases","total","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","Circle","center","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","console","log","TileLayer","url","Chart","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","Graph","useState","setData","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapCountries","setMapCountries","mapZoom","setMapZoom","iso2","getCountriesData","event","countryCode","target","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1fa33e32.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  MenuItem,\r\n  FormControl,\r\n  Select,\r\n} from \"@material-ui/core\";\r\n\r\nimport './Header.css'\r\n\r\n\r\n\r\n\r\nfunction Header(props){\r\n    return(\r\n        <div className=\"appHeader\">\r\n            <h1>Covid-19 Tracker</h1>\r\n\r\n            <FormControl className=\"appDropdown\">\r\n                <Select variant=\"outlined\" onChange={props.onCountrySelect} value={props.country}>\r\n                    \r\n                    <MenuItem value=\"Worldwide\">Worldwide</MenuItem>\r\n                    {props.countries.map((country) => (\r\n                    <MenuItem value={country.value}> {country.name} </MenuItem>\r\n                    ))}\r\n                </Select>\r\n            </FormControl>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nimport \"./Card.css\";\r\n\r\n\r\nfunction Cards(props) {\r\n    return (\r\n        <div className=\"infoBox\">\r\n            <Card\r\n                onClick={props.onClick}\r\n            className={`infoBox ${props.active && \"infoBox--selected\"} ${\r\n                props.isRed && \"infoBox--red\"\r\n            }`}>\r\n                <CardContent>\r\n                    <Typography className=\"title\" color=\"textSecondary\" gutterBottom> {props.title}</Typography>\r\n\r\n                    <h2 className={`infoBox__cases ${!props.isRed && \"infoBox__cases--green\"}`}>{props.cases}</h2>\r\n\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">{props.total} Total</Typography>\r\n\r\n                    \r\n                </CardContent>\r\n            </Card>\r\n        </div>\r\n            \r\n           \r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    rgb: \"rgb(204, 16, 52)\",\r\n    half_op: \"rgba(204, 16, 52, 0.5)\",\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n    rgb: \"rgb(125, 215, 29)\",\r\n    half_op: \"rgba(125, 215, 29, 0.5)\",\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n    rgb: \"rgb(251, 68, 67)\",\r\n    half_op: \"rgba(251, 68, 67, 0.5)\",\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  let sortedData = [...data];\r\n  sortedData.sort((a, b) => {\r\n    if (a.cases > b.cases) {\r\n      return -1;\r\n    } else {\r\n      return 1;\r\n    }\r\n  });\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType = \"cases\") =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      color={casesTypeColors[casesType].hex}\r\n      fillColor={casesTypeColors[casesType].hex}\r\n      fillOpacity={0.4}\r\n      radius={\r\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          ></div>\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from \"react\";\r\nimport { MapContainer as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"../util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  console.log(center);\r\n  // console.log(\"inside ->\")\r\n  // console.log(countries);\r\n  // console.log(casesType);\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          // attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from 'react'\r\nimport './Chart.css';\r\n\r\nfunction Chart(props) {\r\n    return (\r\n        <div className=\"infoTable\">\r\n            <h2>Active Cases</h2>\r\n            <div className=\"table\">\r\n                {\r\n                    props.countries.map(country => (\r\n                        <tr>\r\n                            <td> {country.country} </td>\r\n                            <td>{country.cases}</td>\r\n                        </tr>\r\n                    ))\r\n                }\r\n            </div>\r\n            \r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chart\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\nimport './Graph.css'\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction Graph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className=\"graph\">\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n","import React, { useEffect, useState } from \"react\";\nimport './App.css';\nimport \"leaflet/dist/leaflet.css\";\n\nimport Header from './components/Header/Header';\nimport Cards from './components/Card/Cards';\nimport Map from './components/Map/Map';\nimport Chart from './components/Chart/Chart';\nimport Graph from './components/Graph/Graph';\n\n\nimport { sortData, prettyPrintStat } from \"./components/util\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\n\n\nfunction App() {\n\n  // for the dropdown menu\n  const [countries, setCountries] = useState([]);\n  // for the selected country\n  const [country, setCountry] = useState('Worldwide');\n  // info for the cards\n  const [countryInfo, setCountryInfo] = useState({})\n\n  // for the chart\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  // for the map\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapCountries, setMapCountries] = useState([]);\n  const [mapZoom, setMapZoom] = useState(3);\n  \n\n\n  // for the dropdown menu which will fetch all the countries\n  useEffect( () => {\n      //this will fetch all the data about the countries \n      const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((response) => response.json())\n      .then((data) => {\n          // setting the country name and code\n          const countries = data.map((country) => ({\n          name: country.country,\n          value:country.countryInfo.iso2,\n\n          }));\n\n          // sorts the countries by total cases\n          const sortedData = sortData(data);\n          \n          // updating the states\n          setTableData(sortedData);\n          setCountries(countries);\n          setMapCountries(data);\n      });\n      };\n      getCountriesData();\n  }, []);\n  \n\n  // for the initial Worldwide data\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  // console.log(\"mapCountries->\")\n  // console.log(mapCountries);\n\n\nconst onCountrySelect = async (event) => {\n  const countryCode = event.target.value;\n  // which country is selected\n  setCountry(countryCode);\n\n  let url;\n  if(countryCode === \"Worldwide\") {\n    url = \"https://disease.sh/v3/covid-19/all\"\n  } else {\n    url = `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n  }\n        \n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n        if(countryCode !== \"Worldwide\") {\n          setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n          setMapZoom(4);\n        }\n    });\n}\n\n\n let isRed;\n\n \n  return (\n    <div className=\"app\">\n\n      <div className=\"appLeft\">\n        <Header onCountrySelect={onCountrySelect} country={country} countries={countries}/>\n        \n        {/* cards components to show the info */}\n        <div className=\"Cards\">\n          <Cards  \n          isRed = {true} \n          onClick={(e) => setCasesType(\"cases\")}\n          title=\"Active Cases\"  \n          active={casesType === \"cases\"}\n          cases= {countryInfo.todayCases} \n          total={prettyPrintStat(countryInfo.cases)} />\n\n          <Cards\n          isRed = {false} \n          onClick={(e) => setCasesType(\"recovered\")}\n          title=\"Recovered\" \n          active={casesType === \"recovered\"}\n          cases= {countryInfo.todayRecovered} \n          total={prettyPrintStat(countryInfo.recovered)} />\n\n          <Cards  \n          isRed = {true}\n          onClick={(e) => setCasesType(\"deaths\")}\n          title=\"Deaths\"  \n          active={casesType === \"deaths\"}\n          cases= {countryInfo.todayDeaths} \n          total= {prettyPrintStat(countryInfo.deaths)} />\n        </div>\n         \n        <Graph casesType={casesType}/>\n\n        <Map\n          countries={mapCountries} \n          casesType={casesType} \n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      <div className=\"appRight\">\n        <Card>\n          <CardContent>\n            <div className=\"appRightContents\">\n              <Chart countries={tableData} />\n              \n            </div>\n\n          </CardContent>\n        </Card>\n        \n      </div>\n\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}